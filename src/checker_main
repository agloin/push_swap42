/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: agloin <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/09/16 20:22:23 by agloin            #+#    #+#             */
/*   Updated: 2019/09/23 18:25:43 by agloin           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 *      Проверяет работу программы "push_swap".
 *     Выдает "OK" tсли роограмма отсортировала числа в стеке "a"
 *     и стек "b" пустой.
 */

#include "../includes/push_swap.h"

int main(int argc, char **argv)
{
    char *line;
    t_stack *stack_a;
    t_stack *stack_b;

    stack_b = NULL;
    stack_a = NULL;
    if (argc > 1 && is_digit(argv) && is_repeat(argv) == 0)
    {
        fill_stack(&stack_a, argv);

        t_stack *tmp;
        tmp = stack_a;
        while (get_next_line(0, &line) > 0)
        {
            if (find_command(line, &stack_a, &stack_b) == 0)
                return (0);
            write(1, "stack_a: ", 9);
            tmp = stack_a;
            if (!tmp)
                write(1, "null", 4);
            while (tmp)
            {
                ft_putnbr(tmp->num);
                write(1, " ", 1);
                tmp = tmp->next;
            }

            write(1, "\n", 1);
            write(1, "stack_b: ", 9);
            tmp = stack_b;
            if (!tmp)
                write(1, "null", 4);
            while (tmp)
            {
                ft_putnbr(tmp->num);
                write(1, " ", 1);
                tmp = tmp->next;
            }
            write(1, "\n", 1);
        }
        if (check_ascending_oder(stack_a, stack_b) == 1)
            write(1, "OK\n", 3);
        else
            write(1, "KO\n", 3);
    }
    return(0);
}
